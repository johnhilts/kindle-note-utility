* DONE remove condition handling on READ-COMPLETE-FILE for now
- I currently don't have any use cases requiring it.
* Server organization
** Paths
./server
** packages
- #:jfh-kindle-notes-web-core
  - hunchentoot
- #:jfh-kindle-notes-server-core
  - swank 
  - system level settings
* Application
* package #:jfh-kindle-notes-web-app
** file names
- server/web-protocol.lisp
- server/web-app.lisp
** classes
*** application-configuration
**** use-ssl
**** start-swank
 - Change to "use-swank"
**** swank-port
**** http-port
**** ssl-port
*** web-application
**** =*the-http-server*=
  - Change to hunchentoot-acceptor
** methods
*** start-web-app
**** specialize on application-configuration
**** return web-application
*** stop-web-app
**** specialize on web-application and application-configuration
**** return #:web-app-stopped
* package #:jfh-kindle-notes-common
** file names
- server/server-protocol.lisp
- server/json.lisp
** classes
*** kindle-entry
- from jfh-kindle-notes
** methods
*** convert-to-json 
**** export from package
**** specialize on kindle-entry
* package #:jfh-kindle-notes
* DONE list
- [X] Change all the packages!!!
  - No more "server".
    - We aren't even writing a "server"!!
  - [X] #:jfh-kindle-notes-utility
    - [X] Put it in the utility folder
      - [X] json.lisp
      - [X] io.lisp
      - [X] util.lisp
  - [X] #:jfh-kindle-notes-web-app
    - [X] +About the same as now+
    - [X] Put it in the web-app folder
      - Only actual web things.
  - [X] #:jfh-kindle-notes-main
    - [X] Everything else goes in here.
      - The actual things this app does.
      - Including web pages and APIs
        - You need to inherit the generic ones from the #:jfh-kindle-notes-web-app
* package ideas, etc
** DONE jfh-app-core
- [X] A protocol for interfacing with swank.
  - Start / stop swank.
  - Settings such as port numbers, etc
- [X] Make a nice constructor, and only expose that.
  - [X] +Un-expose accessor names.+
- [X] Protocol for User settings.
  - Encryption.
  - Data paths.
** TODO jfh-web-core
- [X] add a COMMON-HEADER function to web-app and use it on all pages.
  - [X] Get it out of web-app/auth.lisp
  - [X] Add it to web-app/pages.lisp
- [ ] All pages need to require auth'd user.
- [ ] Upload page for kindle notes file.
- [X] Expose web-configuration
  - [X] Add global to main
    - =jfh-kindle-notes-main::*web-configuration*=
  - [X] Assign to the defparameter when starting up the app.
  - [X] Fix how we access the static-root info in pages.lisp and auth.lisp.
- [X] Re-instate:
  - [X] publish-static
    - [X] Add back code.
    - [X] Steal styles from bun website
  - [X] user-path
- [X] Call swank from application-shell, *not* web-app-shell
- [X] A protocol for interfacing with hunchentoot.
  - Start / stop web.
  - Settings such as port numbers, etc
- [X] Macros, etc, for pages, web APIs, etc
  - Such as pages requiring authentication.
** DONE jfh-kindle-notes-main
- [X] See notes above.
** DONE jfh-utility
- [X] Replace jfh-kindle-notes-utility
  - as-is, 1:1 replacement.
* DONE list
- [X] Write =convert-to-json= in jfh-kindle-notes-common
- [X] Write app-start to initialize data etc for the application.
  - Not directly related to web-concerns.
  - But OK to call from =APPLICATION-SHELL=
    - Should =APPLICATION-SHELL= be moved to a "main.lisp"?
* PCL entries (test-use)
** whole table
  | Text| Title | Location | Page No |
  | The choice of whether to use WITH-SLOTSversus WITH-ACCESSORSis the same as the choice between SLOT-VALUEand an accessor function: low-level code that provides the basic functionality of a class may use SLOT-VALUEor WITH-SLOTSto directly manipulate slots in ways not supported by accessor functions or to explicitly avoid the effects of auxiliary methods that may have been defined on the accessor functions. But you should generally use accessor functions or WITH-ACCESSORSunless you have a specific reason not to.                                                                                          | pcl   |          |     241 |
  | you generally want to put restarts in the lowest-level code possible| pcl   |          |     235 |
  | restart-case is a mechanism that allows only imperative transfer of control for its associated restarts. restart-case is built on a lower-level mechanism called restart-bind, which does not force transfer of control. restart-bind is to restart-case as handler-bind is to handler-case. The syntax is (restart-bind ((name function . options)) . body) The body is executed in a dynamic context within which the function will be called whenever (invoke-restart ’name) is executed. The options are keyword-style and are used to pass information such as that provided with the :report keyword in restart-case. | pcl   |          |     213 |
** just the text
restart-case is a mechanism that allows only imperative transfer of control for its associated restarts. 
restart-case is built on a lower-level mechanism called restart-bind, which does not force transfer of control. 
restart-bind is to restart-case as handler-bind is to handler-case. 
The syntax is (restart-bind ((name function . options)) . body) 
The body is executed in a dynamic context within which the function will be called whenever (invoke-restart ’name) is executed. 
The options are keyword-style and are used to pass information such as that provided with the :report keyword in restart-case.

you generally want to put restarts in the lowest-level code possible
** What restarts do I want?
*** handle used port for http / ssl
**** options
- Re-try (built-in)
- Use a different port number - default to (incf port-number)
- Is there a way to see if a port is unavailable?
*** handle used port for swank
** condition for port already in use
Socket error in "bind": EADDRINUSE (Address already in use)
   [Condition of type SB-BSD-SOCKETS:ADDRESS-IN-USE-ERROR]
* scratch
** who-uses READ-COMPLETE-FILE
/home/jfh/code/lisp/source/kindle/kindle-note-utility/app-core/user.lisp
  JFH-APP-CORE::READ-USER-INFO
/home/jfh/code/lisp/source/kindle/kindle-note-utility/utility/util.lisp
  FETCH-OR-CREATE-DATA
*** who-uses READ-USER-INFO
/home/jfh/code/lisp/source/kindle/kindle-note-utility/app-core/user.lisp
  FIND-USER-INFO
*** who-uses FIND-USER-INFO
#<buffer auth.lisp>
  JFH-KINDLE-NOTES-WEB-APP:SIGNUP-PAGE
*** who-uses FETCH-OR-CREATE-DATA
/home/jfh/code/lisp/source/kindle/kindle-note-utility/web-core/web-core.lisp
  JFH-WEB-CORE::MAKE-WEB-CONFIGURATION
#<buffer user.lisp<app-core>>
  (DEFMETHOD JFH-APP-CORE:SAVE-NEW-APPLICATION-USER (JFH-APP-CORE:APPLICATION-USER JFH-APP-CORE:APPLICATION-CONFIGURATION))
/home/jfh/code/lisp/source/kindle/kindle-note-utility/app-core/app-core.lisp
  JFH-APP-CORE:MAKE-APPLICATION-CONFIGURATION
/home/jfh/code/lisp/source/kindle/kindle-note-utility/app-core/user.lisp
  (DEFMETHOD JFH-APP-CORE::FIND-USER-INDEX-ENTRY (T JFH-APP-CORE:APPLICATION-CONFIGURATION))
* DONE read-file conditions
** fetch-or-create-data
- use the restart that creates an empty file if missing
** JFH-APP-CORE::READ-USER-INFO < FIND-USER-INFO < JFH-KINDLE-NOTES-WEB-APP:SIGNUP-PAGE
- use the restart that creates an empty file if missing
