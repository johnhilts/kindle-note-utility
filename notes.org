* DONE remove condition handling on READ-COMPLETE-FILE for now
- I currently don't have any use cases requiring it.
* Server organization
** Paths
./server
** packages
- #:jfh-kindle-notes-web-core
  - hunchentoot
- #:jfh-kindle-notes-server-core
  - swank 
  - system level settings
* Application
* package #:jfh-kindle-notes-web-app
** file names
- server/web-protocol.lisp
- server/web-app.lisp
** classes
*** application-configuration
**** use-ssl
**** start-swank
 - Change to "use-swank"
**** swank-port
**** http-port
**** ssl-port
*** web-application
**** =*the-http-server*=
  - Change to hunchentoot-acceptor
** methods
*** start-web-app
**** specialize on application-configuration
**** return web-application
*** stop-web-app
**** specialize on web-application and application-configuration
**** return #:web-app-stopped
* package #:jfh-kindle-notes-common
** file names
- server/server-protocol.lisp
- server/json.lisp
** classes
*** kindle-entry
- from jfh-kindle-notes
** methods
*** convert-to-json 
**** export from package
**** specialize on kindle-entry
* package #:jfh-kindle-notes
* DONE list
- [X] Change all the packages!!!
  - No more "server".
    - We aren't even writing a "server"!!
  - [X] #:jfh-kindle-notes-utility
    - [X] Put it in the utility folder
      - [X] json.lisp
      - [X] io.lisp
      - [X] util.lisp
  - [X] #:jfh-kindle-notes-web-app
    - [X] +About the same as now+
    - [X] Put it in the web-app folder
      - Only actual web things.
  - [X] #:jfh-kindle-notes-main
    - [X] Everything else goes in here.
      - The actual things this app does.
      - Including web pages and APIs
        - You need to inherit the generic ones from the #:jfh-kindle-notes-web-app
* package ideas, etc
** DONE jfh-app-core
- [X] A protocol for interfacing with swank.
  - Start / stop swank.
  - Settings such as port numbers, etc
- [X] Make a nice constructor, and only expose that.
  - [X] +Un-expose accessor names.+
- [X] Protocol for User settings.
  - Encryption.
  - Data paths.
** Existing flows
*** signup
**** DONE existence check
- signup-page -> validate-signup-parameters -> find-user-info (user-login)
- This works as-is!
**** DONE save new user
- [X] Need to test!
- signup-page -> add-user -> save-new-application-user (web-app-user) -> save-application-user (web-app-user) -> save-application-user (app-user) -> save-user (app-user) -> save-user (web-app-userc)
**** DONE login
- login page
  - -> JFH-APP-CORE:find-user-info (user-login) -> JFH-APP-CORE::find-user-index-entry (user-login) -> JFH-APP-CORE:find-user-path (application-user)
    - [X] This one needs to be updated to use =application-secure-user=.
      - Right now, it's using =meta=.
  - -> establish-user-session -> [haven't finished tracing yet]
**** DONE backtrace when trying to login (no applicable method)
4: (ERROR SB-PCL::NO-APPLICABLE-METHOD-ERROR :GENERIC-FUNCTION #<STANDARD-GENERIC-FUNCTION JFH-APP-CORE:USER-PASSWORD (1)> :ARGS (#<APPLICATION-META-USER User ID: 3236372-43609-3201024-77404, User Login: "rimy@mcrafy.com", Created: 3917736623, Disabled: false>))
5: ((:METHOD NO-APPLICABLE-METHOD (T)) #<STANDARD-GENERIC-FUNCTION JFH-APP-CORE:USER-PASSWORD (1)> #<APPLICATION-META-USER User ID: 3236372-43609-3201024-77404, User Login: "rimy@mcrafy.com", Created: 3917736623, Disabled: false>) [fast-method]
6: ((LAMBDA (SB-PCL::.ARG0. SB-INT:&MORE SB-PCL::.DFUN-MORE-CONTEXT. SB-PCL::.DFUN-MORE-COUNT.) :IN "/home/jfh/.cache/common-lisp/sbcl-1.4.5.debian-linux-x64/home/jfh/quicklisp/dists/quicklisp/software/cl-json-20220707-git/src/objects.fasl") #<STANDARD-GENERIC-FUNCTION JFH-APP-CORE:USER-PASSWORD (1)> #<APPLICATION-META-USER User ID: 3236372-43609-3201024-77404, User Login: "rimy@mcrafy.com", Created: 3917736623, Disabled: false>)
7: (SB-PCL::CALL-NO-APPLICABLE-METHOD #<STANDARD-GENERIC-FUNCTION JFH-APP-CORE:USER-PASSWORD (1)> (#<APPLICATION-META-USER User ID: 3236372-43609-3201024-77404, User Login: "rimy@mcrafy.com", Created: 3917736623, Disabled: false>))
8: (JFH-WEB-AUTH::AUTHENTICATE-HANDLER :USER NIL :PASSWORD NIL :REDIRECT-BACK-TO NIL)
** TODO jfh-web-core [9/12]
- [-] Grab the user specific notes.
  - [-] Refresh notes when uploaded.
    - [X] Logic.
    - [ ] Test.
  - [-] Handle multiple users.
    - [X] Create a hash table to get current user's notes.
      - [X] Upload
	- [X] Code
	- [X] Test
      - [X] Fetch on Login
	- Same way it's fetched after being uploaded.
    - [ ] Delete the entry when user logs out.
- [-] Upload page for kindle notes file.
  - [ ] Parse the uploded file and read it into memory.
  - [ ] Create a page to list uploaded files.
    - [ ] Redirect to the =/upload-list= page
    - [ ] Can also display the list of titles derived from the file.
  - [X] Save uploaded file to user folder.
    - [X] Need to be able to populate the web-app-user user-id slot!!
- [ ] Forgot your password?
  - [ ] Reset password.
  - [ ] Email link.
- [X] Come up with more object oriented way to retrieve web-user info.
  - [X] Use a different class just for registration / authentication.
    - We don't want to read in the password unnecessarily!
  - [X] Need to think some more how exactly to design this.
- [X] add a COMMON-HEADER function to web-app and use it on all pages.
  - [X] Get it out of web-app/auth.lisp
  - [X] Add it to web-app/pages.lisp
- [X] Split off user password.
  - [X] Also split off user-id and user-login so that the password class can inherit it.
  - [X] Put password in its own class with its own specialized method to save it when adding a new user.
    - [X] Generate user-id and password hash as part of the initialize-instance for the password class.
  - [X] Add code to save password.
  - [X] Add code to read password.
  - [X] To do auth, use the password class.
- [X] All pages need to require auth'd user.
- [X] Expose web-configuration
  - [X] Add global to main
    - =jfh-kindle-notes-main::*web-configuration*=
  - [X] Assign to the defparameter when starting up the app.
  - [X] Fix how we access the static-root info in pages.lisp and auth.lisp.
- [X] Re-instate:
  - [X] publish-static
    - [X] Add back code.
    - [X] Steal styles from bun website
  - [X] user-path
- [X] Call swank from application-shell, *not* web-app-shell
- [X] A protocol for interfacing with hunchentoot.
  - Start / stop web.
  - Settings such as port numbers, etc
- [X] Macros, etc, for pages, web APIs, etc
  - Such as pages requiring authentication.
** DONE jfh-kindle-notes-main
- [X] See notes above.
** DONE jfh-utility
- [X] Replace jfh-kindle-notes-utility
  - as-is, 1:1 replacement.
* DONE list
- [X] Write =convert-to-json= in jfh-kindle-notes-common
- [X] Write app-start to initialize data etc for the application.
  - Not directly related to web-concerns.
  - But OK to call from =APPLICATION-SHELL=
    - Should =APPLICATION-SHELL= be moved to a "main.lisp"?
* PCL entries (test-use)
** whole table
  | Text| Title | Location | Page No |
  | The choice of whether to use WITH-SLOTSversus WITH-ACCESSORSis the same as the choice between SLOT-VALUEand an accessor function: low-level code that provides the basic functionality of a class may use SLOT-VALUEor WITH-SLOTSto directly manipulate slots in ways not supported by accessor functions or to explicitly avoid the effects of auxiliary methods that may have been defined on the accessor functions. But you should generally use accessor functions or WITH-ACCESSORSunless you have a specific reason not to.                                                                                          | pcl   |          |     241 |
  | you generally want to put restarts in the lowest-level code possible| pcl   |          |     235 |
  | restart-case is a mechanism that allows only imperative transfer of control for its associated restarts. restart-case is built on a lower-level mechanism called restart-bind, which does not force transfer of control. restart-bind is to restart-case as handler-bind is to handler-case. The syntax is (restart-bind ((name function . options)) . body) The body is executed in a dynamic context within which the function will be called whenever (invoke-restart ’name) is executed. The options are keyword-style and are used to pass information such as that provided with the :report keyword in restart-case. | pcl   |          |     213 |
** just the text
restart-case is a mechanism that allows only imperative transfer of control for its associated restarts. 
restart-case is built on a lower-level mechanism called restart-bind, which does not force transfer of control. 
restart-bind is to restart-case as handler-bind is to handler-case. 
The syntax is (restart-bind ((name function . options)) . body) 
The body is executed in a dynamic context within which the function will be called whenever (invoke-restart ’name) is executed. 
The options are keyword-style and are used to pass information such as that provided with the :report keyword in restart-case.

you generally want to put restarts in the lowest-level code possible
** What restarts do I want?
*** handle used port for http / ssl
**** options
- Re-try (built-in)
- Use a different port number - default to (incf port-number)
- Is there a way to see if a port is unavailable?
*** handle used port for swank
** condition for port already in use
Socket error in "bind": EADDRINUSE (Address already in use)
   [Condition of type SB-BSD-SOCKETS:ADDRESS-IN-USE-ERROR]
* scratch
** who-uses READ-COMPLETE-FILE
/home/jfh/code/lisp/source/kindle/kindle-note-utility/app-core/user.lisp
  JFH-APP-CORE::READ-USER-INFO
/home/jfh/code/lisp/source/kindle/kindle-note-utility/utility/util.lisp
  FETCH-OR-CREATE-DATA
*** who-uses READ-USER-INFO
/home/jfh/code/lisp/source/kindle/kindle-note-utility/app-core/user.lisp
  FIND-USER-INFO
*** who-uses FIND-USER-INFO
#<buffer auth.lisp>
  JFH-KINDLE-NOTES-WEB-APP:SIGNUP-PAGE
*** who-uses FETCH-OR-CREATE-DATA
/home/jfh/code/lisp/source/kindle/kindle-note-utility/web-core/web-core.lisp
  JFH-WEB-CORE::MAKE-WEB-CONFIGURATION
#<buffer user.lisp<app-core>>
  (DEFMETHOD JFH-APP-CORE:SAVE-NEW-APPLICATION-USER (JFH-APP-CORE:APPLICATION-USER JFH-APP-CORE:APPLICATION-CONFIGURATION))
/home/jfh/code/lisp/source/kindle/kindle-note-utility/app-core/app-core.lisp
  JFH-APP-CORE:MAKE-APPLICATION-CONFIGURATION
/home/jfh/code/lisp/source/kindle/kindle-note-utility/app-core/user.lisp
  (DEFMETHOD JFH-APP-CORE::FIND-USER-INDEX-ENTRY (T JFH-APP-CORE:APPLICATION-CONFIGURATION))
* DONE read-file conditions
** fetch-or-create-data
- use the restart that creates an empty file if missing
** JFH-APP-CORE::READ-USER-INFO < FIND-USER-INFO < JFH-KINDLE-NOTES-WEB-APP:SIGNUP-PAGE
- use the restart that creates an empty file if missing
